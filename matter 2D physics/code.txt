var Engine = Matter.Engine,
    Render = Matter.Render,
    Runner = Matter.Runner,
    Composites = Matter.Composites, 
    Bodies = Matter.Bodies,
    World = Matter.World,
    Events = Matter.Events,
    Body = Matter.Body,
    Mouse = Matter.Mouse,
    MouseConstraint = Matter.MouseConstraint,
    Constraint = Matter.Constraint,
    Composite = Matter.Composite,
    Common = Matter.Common,
    Vector = Matter.Vector,
    Constraint = Matter.Constraint,
    Bounds = Matter.Bounds;

var engine = Engine.create();
var render = Render.create({
  element: document.body,
  engine: engine,
  options: {
    wireframes: false,
    width: 2100, 
    height: 1200,
    showAngleIndicator: false,
    hasBounds: true,
    background: 'black'
  }
});

var mouse = Mouse.create(render.canvas),
    mouseConstraint = MouseConstraint.create(engine,{
      mouse: mouse,
      constraint: {
        stiffness: 0.2,
        render: {
          visible: false
        }
      }
    });

World.add(engine.world, mouseConstraint)

Render.run(render);
var runner = Runner.create();
Runner.run(runner, engine)

let ground = Bodies.rectangle(500, 500, 999, 34, {isStatic: true, render: {fillStyle: 'gray'}});
let mountain = Bodies.trapezoid(180, 385, 330, 270, .9, {isStatic: true, render: {fillStyle: 'gray'}});
let wreckit = Composites.newtonsCradle(511, 1, 1, 14, 65, 230);
let floor1 = Bodies.rectangle(600, 110, 110, 10, {isStatic: true, render: {fillStyle: 'gray'}});
let stack = Composites.stack(545, 40, 2, 7, 0, 0, function(x, y){
  return Bodies.rectangle(x, y, 10, 10)
});
let floor2 = Bodies.rectangle(770, 230, 115, 10, {isStatic: true, render: {fillStyle: 'gray'}});
let pyramid = Composites.pyramid(725, 160, 7, 7, 0, 0, function(x, y){
  return Bodies.rectangle(x, y, 13, 13)
});

let car = Composites.car(190, 50, 90, 24, 20);
var stack2 = Composites.stack(619, 358, 1, 5, 0, 0, function(x, y){
  return Bodies.rectangle(x, y, 15, 15)
});
var launcher = Bodies.rectangle(710, 450, 200, 13, {render: {fillStyle: "gray"}});

let planet = Bodies.circle(340, 30, 15, {render: {fillStyle: 'gray'}});
planet.restitution = 1.4;
let planet2 = Bodies.circle(400, 60, 25, {isStatic: true, render: {fillStyle: '#00FFFF'}})


// bridge

var group = Body.nextGroup(true);

var bridge = Composites.stack(160, 890, 15, 1, 0, 0, function(x, y) {
       return Bodies.rectangle(x - 20, y, 50, 21, {
         collisionFilter: {group: group},
         chamfer: 5,
         density: 0.008,
         frictionAir: 0.0005
       });
});

Composites.chain(bridge, 0.3, 0, -0.3, 0, {
  stiffness: 0,
  length: 0,
  render: {
    visible: false
  }
});


World.add(engine.world, [
  bridge,
  Bodies.rectangle(30, 870, 220, 380, {
    isStatic: true,
    render: {fillStyle: "gray"},
    chamfer: {radius: 20}
  }),
  Bodies.rectangle(770, 870, 220, 380, {
    isStatic: true,
    render: {fillStyle: "gray"},
    chamfer: {radius: 20}
  }),
  Constraint.create({
    pointA: {x: 140, y: 720},
    bodyB: bridge.bodies[0],
    pointB: {x: -25, y: 0 },
    length: 2,
    stiffness: 0.9
  }),
  Constraint.create({
    pointA: {x: 660, y: 720},
    bodyB: bridge.bodies[bridge.bodies.length-1],
    pointB: {x: 25, y: 0},
    length: 2,
    stiffness: 0.9
  })
]);

// launcher

World.add(engine.world, [
  stack2,
  launcher,
  Bodies.rectangle(620, 473, 10, 20, {isStatic: true, render: {fillStyle: 'gray'}}),
  Bodies.circle(770, 240, 30, {density: 0.05}),
  Constraint.create({bodyA: launcher, pointB: {x: 770, y: 485}}),
  Constraint.create({bodyA: launcher, pointB: {x: 669, y: 485}})
]);



// time scale

var boom = function(engine){
  var bodies2 = Composite.allBodies(engine.world);
  
  for(let i = 0; i< bodies2.length; i++){
    var body = bodies2[i];
    
    if(!body.isStatic && body.position.y >= 500){
      var forceMagnitude = 0.02*body.mass;
      Body.applyForce(body, body.position,{
                      x: (forceMagnitude + Common.random()* forceMagnitude) * Common.choose([1, -1]),
        y: -forceMagnitude + Common.random() * -forceMagnitude
       })
    }
  }
};

var timeScaleTarget = 0.9,
    counter = 0;

Events.on(engine, 'afterUpdate', function(event){
  engine.timing.timeScale += (timeScaleTarget - engine.timing.timeScale) * 0.01;
  
  counter += 2
  
  if(counter >= 40 * 1) {
    if (timeScaleTarget < 1){
      timeScaleTarget = 1;
    }else{
      timeScaleTarget = 0.01;
    }
    
   boom(engine);
    
    counter = 0;
    
    }
});

var bodyOptions = {
  frictionAir: 0,
  friciton: 0.0002,
  restitution: 0.9
}

World.add(engine.world, Composites.stack(1400, 300, 15, 3, 20, 40, function(x, y) {
        return Bodies.circle(x, y, Common.random(10, 20), bodyOptions);
    }));

 World.add(engine.world, Composites.stack(1400, 400, 8, 3, 0, 0, function(x, y) {
        switch (Math.round(Common.random(0, 1))) {

        case 0:
            if (Common.random() < 0.8) {
                return Bodies.rectangle(x, y, Common.random(10, 30), Common.random(10, 30), bodyOptions);
            } else {
                return Bodies.rectangle(x, y, Common.random(50, 100), Common.random(10, 10), bodyOptions);
            }
        case 1:
            return Bodies.polygon(x, y, Math.round(Common.random(3, 5)), Common.random(10, 30), bodyOptions);

        }
    }));

World.add(engine.world, [
  Bodies.rectangle(1500, 300, 800, 50, {isStatic: true, render: {fillStyle: "gray"}}),
  Bodies.rectangle(1530, 600, 800, 50, {isStatic: true, render: {fillStyle: "gray"}}),
  Bodies.rectangle(1110, 450, 50, 350, {isStatic: true, render: {fillStyle: "gray"}}),
  Bodies.rectangle(1910, 450, 50, 350, {isStatic: true, render: {fillStyle: "gray"}})
]);

var group = Body.nextGroup(true),
    length = 110,
    width = 20;

var pendulum = Composites.stack(400, 200, 2, 1, -20, 0, function(x, y){
  return Bodies.rectangle(x, y, length, width, {
    collisionFilter: {group: group},
    frictionAir: 0,
    chamfer: 3.5,
    render: {
      lineWidth: 1
    }
  });
});

engine.world.gravity.scale = 0.001;

//2nd pendulum
Composites.chain(pendulum, 0.40, 0, -0.40, 0, {
  stiffness: 0.4,
  length: 0,
  angularStiffness: 0.5,
  render: {
    strokeStyle: 'red'
  }
});

Composite.add(pendulum, 
     Constraint.create({
  bodyB: pendulum.bodies[0],
  pointB: {x: -length * 0.32, y: 0},
  pointA: {x: pendulum.bodies[0].position.x - length * 0.40, y: pendulum.bodies[0].position.y},
  stiffness: 0.3,
  length: 0,
  render: {
    strokeStyle: "blue"
  }
}));

var lowerArm = pendulum.bodies[1]

Body.rotate(lowerArm, -Math.PI * 0.3, {
  x: lowerArm.position.x - 100,
  y: lowerArm.position.y
});

//projectile *new*

var projectile = Bodies.circle(940, 200, 10, {restitution: 1.4});

let sling = Constraint.create({
  pointA: {x: 940, y: 200},
  bodyB: projectile,
  stiffness: 0.05
});

let firing = false;
Events.on(mouseConstraint, 'enddrag', function(e){
  if(e.body === projectile) firing = true
})

Events.on(engine, 'afterUpdate', function(){
  if(firing && Math.abs(projectile.position.x-940) < 5 && Math.abs(projectile.position.y-200) < 10) {
    projectile = Bodies.circle(940, 200, 10,{restitution: 1.4})
    World.add(engine.world, projectile)
    sling.bodyB = projectile
    firing = false
  }
})


World.add(engine.world, [ground, mountain, wreckit, floor1, stack, floor2, pyramid, car, planet, planet2, pendulum, projectile, sling])


Events.on(engine, "beforeUpdate", gravity)

//gravitational attraction

function gravity(){
  const sub = Matter.Vector.sub(planet2.position, planet.position)
  const mag = Matter.Vector.magnitude(sub)
  const unit = Matter.Vector.normalise(sub)
  const push = Matter.Vector.mult(unit, 0.85/mag)
  planet.force.x += push.x*planet.mass
  planet.force.y += push.y*planet.mass
}







