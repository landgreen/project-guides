const canvas = document.createElement("canvas");
const ctx = canvas.getContext("2d");
document.body.appendChild(canvas);
canvas.width = window.innerWidth / 2;
canvas.height = window.innerHeight / 2;

let w = canvas.width;
let h = canvas.height;
// w = h;
let ratio = 0.05;
let xRatio = ratio;
let yRatio = ratio;
let xMin = (-5 * w) / 100; //-2;
let yMin = (-5 * h) / 100; //-1.12;
let xMax = w / 100; //4.7;
let yMax = h / 100; //1.12;
let imageData = ctx.createImageData(w, h);
let color = [];
let maxIter = 80;

for (let i = 0; i <= maxIter; i++) {
  color.push(scale(i, maxIter, 0, 255, 0));
}

function hslToRgb(h, s, l) {
  var r, g, b;

  if (s == 0) {
    r = g = b = l; // achromatic
  } else {
    var hue2rgb = function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    };

    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }

  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}

function lerp(a, b, x) {
  return a + (b - a) * x;
}

function scale(OldValue, OldMax, OldMin, NewMax, NewMin) {
  let OldRange = OldMax - OldMin;
  if (OldRange == 0) {
    let NewValue = NewMin;
  } else {
    let NewRange = NewMax - NewMin;
    NewValue = ((OldValue - OldMin) * NewRange) / OldRange + NewMin;
  }
  return NewValue;
}

// {https://en.wikipedia.org/wiki/Mandelbrot_set#Basic_properties
//  https://www.codingame.com/playgrounds/2358/how-to-plot-the-mandelbrot-set/mandelbrot-set
//  https://www.larsonprecalculus.com/precalc9e/wp-content/uploads/additional_lessons/Precalc%20RMRP%20Extension_dmfcp.pdf
// }

for (let i = 0; i < imageData.data.length; i += 4) {
  // Modify pixel data
  imageData.data[i + 0] = 255; // R value
  imageData.data[i + 1] = 255; // G value
  imageData.data[i + 2] = 255; // B value
  imageData.data[i + 3] = 255; // A value
}

function changePixel(x, y, r, g, b) {
  // Modify pixel data
  imageData.data[y * (imageData.width * 4) + x * 4] = r; // R value
  imageData.data[y * (imageData.width * 4) + x * 4 + 1] = g; // G value
  imageData.data[y * (imageData.width * 4) + x * 4 + 2] = b; // B value
  imageData.data[y * (imageData.width * 4) + x * 4 + 3] = 255; // A value
}

function mandelbrot() {
  for (let i = 0; i < h; i++) {
    for (let j = 0; j < w; j++) {
      let x0 = scale(j, w, 0, xMin, xMax);
      let y0 = scale(i, h, 0, yMin, yMax);
      let x = 0;
      let y = 0;
      let iteration = 0;
      let xTemp = 0;

      while (x * x + y * y <= 2 * 2 && iteration < maxIter) {
        xTemp = x * x - y * y + x0;
        y = 2 * x * y + y0;
        x = xTemp;
        iteration++;
      }

      //       if (iteration > maxIter * 0.8) {
      //         changePixel(j, i, 255, 0, 0);
      //       } else if (iteration > maxIter * 0.7) {
      //         changePixel(j, i, 255, 215, 0);
      //       } else if (iteration > maxIter * 0.6) {
      //         changePixel(j, i, 255, 255, 0);
      //       } else if (iteration > maxIter * 0.5) {
      //         changePixel(j, i, 0, 255, 0);
      //       } else if (iteration > maxIter * 0.4) {
      //         changePixel(j, i, 0, 0, 255);
      //       } else if (iteration > maxIter * 0.3) {
      //         changePixel(j, i, 255, 0, 255);
      //       } else if (iteration > maxIter * 0.2) {
      //         changePixel(j, i, 75, 0, 130);
      //       } else if (iteration > maxIter - maxIter) {
      //         changePixel(j, i, 0, 0, 0);
      //       }

      // //rgb
      // changePixel(
      //   j,
      //   i,
      //   hslToRgb(
      //     lerp(0.83, 0, iteration / maxIter),
      //     1,
      //     lerp(0, 0.5, iteration / maxIter)
      //   )[0],
      //   hslToRgb(
      //     lerp(0.83, 0, iteration / maxIter),
      //     1,
      //     lerp(0, 0.5, iteration / maxIter)
      //   )[1],
      //   hslToRgb(
      //     lerp(0.83, 0, iteration / maxIter),
      //     1,
      //     lerp(0, 0.5, iteration / maxIter)
      //   )[2]
      // );

      //black and white
      changePixel(
        j,
        i,
        lerp(28, 255, iteration / maxIter),
        lerp(35, 0, iteration / maxIter),
        lerp(51, 255, iteration / maxIter)
      );
    }
  }
}

mandelbrot();

window.addEventListener("keydown", function(event) {
  switch (event.code) {
    //increase range
    case "Minus":
      xMin -= xRatio;
      xMax += xRatio;
      yMin -= yRatio;
      yMax += yRatio;
      mandelbrot();
      break;
    //decrease range
    case "Equal":
      xMin += xRatio;
      xMax -= xRatio;
      yMin += yRatio;
      yMax -= yRatio;
      mandelbrot();
      break;
    //decrease clarity
    case "BracketLeft":
      maxIter--;
      mandelbrot();
      break;
    //increase clarity
    case "BracketRight":
      maxIter++;
      mandelbrot();
      break;
    //move right
    case "KeyA":
      xMin += xRatio;
      xMax += xRatio;
      mandelbrot();
      break;
    //move left
    case "KeyD":
      xMin -= xRatio;
      xMax -= xRatio;
      mandelbrot();
      break;
    //move up
    case "KeyS":
      yMin -= yRatio;
      yMax -= yRatio;
      mandelbrot();
      break;
    //move down
    case "KeyW":
      yMin += yRatio;
      yMax += yRatio;
      mandelbrot();
      break;
  }
});

//___________________animation loop ___________________

function cycle() {
  //clears screen

  ctx.putImageData(imageData, 0, 0);
  xRatio = Math.abs(xMax - xMin) / 10;
  yRatio = Math.abs(yMax - yMin) / 10;
  requestAnimationFrame(cycle);
}
requestAnimationFrame(cycle);
